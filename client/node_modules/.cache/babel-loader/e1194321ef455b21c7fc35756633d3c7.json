{"ast":null,"code":"import _slicedToArray from \"/Users/corrinepusillo/Downloads/axo2/new/axolotl/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/corrinepusillo/Downloads/axo2/new/axolotl/client/src/contexts/AuthContext.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { auth } from \"../firebase\";\nconst AuthContext = React.createContext();\nexport function useAuth() {\n  return useContext(AuthContext);\n} // Setup our Authentication Provider methods with firebase.\n\nexport function AuthProvider({\n  children\n}) {\n  // current user states and loading states\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentUser = _useState2[0],\n        setCurrentUser = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1]; // Use firebase functionality to allow users to sign up for accounts.\n\n\n  function signup(email, password) {\n    return auth.createUserWithEmailAndPassword(email, password);\n  } // Use firebase functionality to allow users to log in to their accounts.\n\n\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  } // Use firebase functionality to allow users to log out of their accounts.\n\n\n  function logout() {\n    return auth.signOut();\n  } // Use firebase functionality to allow users to reset their passwords.\n\n\n  function resetPassword(email) {\n    return auth.sendPasswordResetEmail(email);\n  } // Use firebase functionality to allow users to update their emails.\n\n\n  function updateEmail(email) {\n    return currentUser.updateEmail(email);\n  } // Use firebase functionality to allow users to update their passwords.\n\n\n  function updatePassword(password) {\n    return currentUser.updatePassword(password);\n  } // Set our loading state and currentUser states using firebase auth state functionality.\n\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []); // values to export\n\n  const value = {\n    currentUser,\n    signup,\n    login,\n    logout,\n    resetPassword,\n    updateEmail,\n    updatePassword\n  };\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, !loading && children);\n}","map":{"version":3,"sources":["/Users/corrinepusillo/Downloads/axo2/new/axolotl/client/src/contexts/AuthContext.js"],"names":["React","useContext","useState","useEffect","auth","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loading","setLoading","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","unsubscribe","onAuthStateChanged","user","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAAQC,IAAR,QAAmB,aAAnB;AAGA,MAAMC,WAAW,GAAGL,KAAK,CAACM,aAAN,EAApB;AAEA,OAAO,SAASC,OAAT,GAAkB;AACrB,SAAON,UAAU,CAACI,WAAD,CAAjB;AACH,C,CAED;;AACA,OAAO,SAASG,YAAT,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAAmC;AACtC;AADsC,oBAEAP,QAAQ,EAFR;AAAA;AAAA,QAE/BQ,WAF+B;AAAA,QAElBC,cAFkB;;AAAA,qBAGRT,QAAQ,CAAC,IAAD,CAHA;AAAA;AAAA,QAG/BU,OAH+B;AAAA,QAGtBC,UAHsB,kBAKtC;;;AACA,WAASC,MAAT,CAAgBC,KAAhB,EAAuBC,QAAvB,EAAgC;AAC5B,WAAOZ,IAAI,CAACa,8BAAL,CAAoCF,KAApC,EAA0CC,QAA1C,CAAP;AACH,GARqC,CAUtC;;;AACA,WAASE,KAAT,CAAeH,KAAf,EAAsBC,QAAtB,EAA+B;AAC3B,WAAOZ,IAAI,CAACe,0BAAL,CAAgCJ,KAAhC,EAAsCC,QAAtC,CAAP;AACH,GAbqC,CAetC;;;AACA,WAASI,MAAT,GAAiB;AACb,WAAOhB,IAAI,CAACiB,OAAL,EAAP;AACH,GAlBqC,CAoBtC;;;AACA,WAASC,aAAT,CAAuBP,KAAvB,EAA6B;AACzB,WAAOX,IAAI,CAACmB,sBAAL,CAA4BR,KAA5B,CAAP;AACH,GAvBqC,CAyBtC;;;AACA,WAASS,WAAT,CAAqBT,KAArB,EAA2B;AACvB,WAAOL,WAAW,CAACc,WAAZ,CAAwBT,KAAxB,CAAP;AACH,GA5BqC,CA8BtC;;;AACA,WAASU,cAAT,CAAwBT,QAAxB,EAAiC;AAC7B,WAAON,WAAW,CAACe,cAAZ,CAA2BT,QAA3B,CAAP;AACH,GAjCqC,CAmCtC;;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMuB,WAAW,GAAGtB,IAAI,CAACuB,kBAAL,CAAwBC,IAAI,IAAI;AAChDjB,MAAAA,cAAc,CAACiB,IAAD,CAAd;AACAf,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEH,KAJmB,CAApB;AAKA,WAAOa,WAAP;AACH,GAPQ,EAON,EAPM,CAAT,CApCsC,CA6CtC;;AACA,QAAMG,KAAK,GAAG;AACVnB,IAAAA,WADU;AAEVI,IAAAA,MAFU;AAGVI,IAAAA,KAHU;AAIVE,IAAAA,MAJU;AAKVE,IAAAA,aALU;AAMVE,IAAAA,WANU;AAOVC,IAAAA;AAPU,GAAd;AAUA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEI,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACjB,OAAD,IAAYH,QADjB,CADJ;AAKH","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\nimport {auth} from \"../firebase\"\n\n\nconst AuthContext = React.createContext()\n\nexport function useAuth(){\n    return useContext(AuthContext)\n}\n\n// Setup our Authentication Provider methods with firebase.\nexport function AuthProvider( {children} ){\n    // current user states and loading states\n    const [currentUser, setCurrentUser] = useState()\n    const [loading, setLoading] = useState(true)\n\n    // Use firebase functionality to allow users to sign up for accounts.\n    function signup(email, password){\n        return auth.createUserWithEmailAndPassword(email,password)\n    }\n\n    // Use firebase functionality to allow users to log in to their accounts.\n    function login(email, password){\n        return auth.signInWithEmailAndPassword(email,password)\n    }\n\n    // Use firebase functionality to allow users to log out of their accounts.\n    function logout(){\n        return auth.signOut()\n    }\n\n    // Use firebase functionality to allow users to reset their passwords.\n    function resetPassword(email){\n        return auth.sendPasswordResetEmail(email);\n    }\n\n    // Use firebase functionality to allow users to update their emails.\n    function updateEmail(email){\n        return currentUser.updateEmail(email)\n    }\n\n    // Use firebase functionality to allow users to update their passwords.\n    function updatePassword(password){\n        return currentUser.updatePassword(password);\n    }\n\n    // Set our loading state and currentUser states using firebase auth state functionality.\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            setCurrentUser(user)\n            setLoading(false)\n            \n        })\n        return unsubscribe\n    }, [])\n\n    // values to export\n    const value = {\n        currentUser,\n        signup,\n        login,\n        logout,\n        resetPassword,\n        updateEmail,\n        updatePassword\n    }\n\n    return(\n        <AuthContext.Provider value={value}>\n            {!loading && children}\n        </AuthContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}